# Create dataframe with only coordinates
df_cd <- data.frame(x = data$Longitude, y = data$Latitude)
# Get elevation from coordinates using elevatr
crs_dd <- 4326
#AWS elevation
df_ev_aws<-get_elev_point(df_1933_cd,
prj = crs_dd,
src = "aws",
z=aws_res,
if(osc == TRUE){
paste("override_size_check = TRUE")}
)
# EPQS elevation
df_ev_epqs <- get_elev_point(df_cd, prj = crs_dd, src = "epqs")
# Compile into one dataframe
df_ev <- data.frame(Elevation.EPQS = df_ev_epqs$elevation,
Elevation.AWS = df_ev_aws$elevation,
Difference = abs(df_ev_epqs$elevation - df_ev_aws$elevation)
)
# Check the mean difference of elevation between EPQS and AWS methods
mean_ev_diff <- mean(df_ev$Difference, na.rm = TRUE)
# Remove excess dataframes
rm(df_cd, df_ev_aws, df_ev_epqs, crs_dd)
return(data.frame(elevation_data = df_ev, mean_difference = mean_ev_diff))
}
elevation_test <- get_elevation(df_1933_fl, 2)
#Output will be the dataframe "df_1933_ev"
get_elevation <- function(data, aws_res, osc = c('TRUE', 'FALSE')) {
# Create dataframe with only coordinates
df_cd <- data.frame(x = data$Longitude, y = data$Latitude)
# Get elevation from coordinates using elevatr
crs_dd <- 4326
#AWS elevation
df_ev_aws<-get_elev_point(df_1933_cd,
prj = crs_dd,
src = "aws",
z=aws_res,
if(osc == TRUE){
return("override_size_check = TRUE")}
)
# EPQS elevation
df_ev_epqs <- get_elev_point(df_cd, prj = crs_dd, src = "epqs")
# Compile into one dataframe
df_ev <- data.frame(Elevation.EPQS = df_ev_epqs$elevation,
Elevation.AWS = df_ev_aws$elevation,
Difference = abs(df_ev_epqs$elevation - df_ev_aws$elevation)
)
# Check the mean difference of elevation between EPQS and AWS methods
mean_ev_diff <- mean(df_ev$Difference, na.rm = TRUE)
# Remove excess dataframes
rm(df_cd, df_ev_aws, df_ev_epqs, crs_dd)
return(data.frame(elevation_data = df_ev, mean_difference = mean_ev_diff))
}
elevation_test <- get_elevation(df_1933_fl, 2)
#Output will be the dataframe "df_1933_ev"
get_elevation <- function(data, aws_res, osc = FALSE) {
# Create dataframe with only coordinates
df_cd <- data.frame(x = data$Longitude, y = data$Latitude)
# Get elevation from coordinates using elevatr
crs_dd <- 4326
#AWS elevation
if (osc) {
df_ev_aws <- get_elev_point(df_cd, prj = crs_dd, src = "aws", z = aws_res, override_size_check = TRUE)
} else {
df_ev_aws <- get_elev_point(df_cd, prj = crs_dd, src = "aws", z = aws_res)
}
# EPQS elevation
df_ev_epqs <- get_elev_point(df_cd, prj = crs_dd, src = "epqs")
# Compile into one dataframe
df_ev <- data.frame(Elevation.EPQS = df_ev_epqs$elevation,
Elevation.AWS = df_ev_aws$elevation,
Difference = abs(df_ev_epqs$elevation - df_ev_aws$elevation)
)
# Check the mean difference of elevation between EPQS and AWS methods
mean_ev_diff <- mean(df_ev$Difference, na.rm = TRUE)
# Remove excess dataframes
rm(df_cd, df_ev_aws, df_ev_epqs, crs_dd)
return(data.frame(elevation_data = df_ev, mean_difference = mean_ev_diff))
}
elevation_test <- get_elevation(df_1933_fl, 2)
elevation_test <- get_elevation(df_1933_fl, 2, osc = TRUE)
elevation_test <- get_elevation(df_1933_fl, 12)
#Output will be the dataframe "df_1933_ev"
get_elevation <- function(data, aws_res, osc = FALSE) {
if(aws_res > 9 & osc == FALSE){
print("WARNING: aws_res above 8 downloads very large files. Check 'osc = TRUE' to override")
}else{
# Create dataframe with only coordinates
df_cd <- data.frame(x = data$Longitude, y = data$Latitude)
# Get elevation from coordinates using elevatr
crs_dd <- 4326
#AWS elevation
if (osc) {
df_ev_aws <- get_elev_point(df_cd, prj = crs_dd, src = "aws", z = aws_res, override_size_check = TRUE)
} else {
df_ev_aws <- get_elev_point(df_cd, prj = crs_dd, src = "aws", z = aws_res)
}
# EPQS elevation
df_ev_epqs <- get_elev_point(df_cd, prj = crs_dd, src = "epqs")
# Compile into one dataframe
df_ev <- data.frame(Elevation.EPQS = df_ev_epqs$elevation,
Elevation.AWS = df_ev_aws$elevation,
Difference = abs(df_ev_epqs$elevation - df_ev_aws$elevation)
)
# Check the mean difference of elevation between EPQS and AWS methods
mean_ev_diff <- mean(df_ev$Difference, na.rm = TRUE)
# Remove excess dataframes
rm(df_cd, df_ev_aws, df_ev_epqs, crs_dd)
return(data.frame(elevation_data = df_ev, mean_difference = mean_ev_diff))
}
}
elevation_test <- get_elevation(df_1933_fl, 12)
#Output will be the dataframe "df_1933_ev"
get_elevation <- function(data, aws_res, osc = FALSE) {
if(aws_res > 9 & osc == FALSE){
message("WARNING: aws_res above 8 downloads very large files. Check 'osc = TRUE' to override")
}else{
# Create dataframe with only coordinates
df_cd <- data.frame(x = data$Longitude, y = data$Latitude)
# Get elevation from coordinates using elevatr
crs_dd <- 4326
#AWS elevation
if (osc) {
df_ev_aws <- get_elev_point(df_cd, prj = crs_dd, src = "aws", z = aws_res, override_size_check = TRUE)
} else {
df_ev_aws <- get_elev_point(df_cd, prj = crs_dd, src = "aws", z = aws_res)
}
# EPQS elevation
df_ev_epqs <- get_elev_point(df_cd, prj = crs_dd, src = "epqs")
# Compile into one dataframe
df_ev <- data.frame(Elevation.EPQS = df_ev_epqs$elevation,
Elevation.AWS = df_ev_aws$elevation,
Difference = abs(df_ev_epqs$elevation - df_ev_aws$elevation)
)
# Check the mean difference of elevation between EPQS and AWS methods
mean_ev_diff <- mean(df_ev$Difference, na.rm = TRUE)
# Remove excess dataframes
rm(df_cd, df_ev_aws, df_ev_epqs, crs_dd)
return(data.frame(elevation_data = df_ev, mean_difference = mean_ev_diff))
}
}
elevation_test <- get_elevation(df_1933_fl, 12)
elevation_test <- get_elevation(df_1933_fl, 3)
#Output will be the dataframe "df_1933_ev"
get_elevation <- function(data, aws_res, osc = FALSE) {
if(aws_res > 9 & osc == FALSE){
message("WARNING: aws_res above 8 downloads very large files. Check 'osc = TRUE' to override")
}else{
# Create dataframe with only coordinates
df_cd <- data.frame(x = data$Longitude, y = data$Latitude)
# Get elevation from coordinates using elevatr
crs_dd <- 4326
#AWS elevation
if (osc) {
df_ev_aws <- get_elev_point(df_cd, prj = crs_dd, src = "aws", z = aws_res, override_size_check = TRUE)
} else {
df_ev_aws <- get_elev_point(df_cd, prj = crs_dd, src = "aws", z = aws_res)
}
# EPQS elevation
df_ev_epqs <- get_elev_point(df_cd, prj = crs_dd, src = "epqs")
# Compile into one dataframe
df_ev <- data.frame(Elevation.EPQS = df_ev_epqs$elevation,
Elevation.AWS = df_ev_aws$elevation,
Difference = abs(df_ev_epqs$elevation - df_ev_aws$elevation)
)
# Check the mean difference of elevation between EPQS and AWS methods
mean_ev_diff <- mean(df_ev$Difference, na.rm = TRUE)
# Remove excess dataframes
rm(df_cd, df_ev_aws, df_ev_epqs, crs_dd)
return(data.frame(data, elevation_data = df_ev, mean_difference = mean_ev_diff))
}
}
elevation_test <- get_elevation(df_1933_fl, 3)
#Output will be the dataframe "df_1933_ev"
get_elevation <- function(data, aws_res, osc = FALSE) {
if(aws_res > 9 & osc == FALSE){
message("WARNING: aws_res above 8 downloads very large files. Check 'osc = TRUE' to override")
}else{
# Create dataframe with only coordinates
df_cd <- data.frame(x = data$Longitude, y = data$Latitude)
# Get elevation from coordinates using elevatr
crs_dd <- 4326
#AWS elevation
if (osc) {
df_ev_aws <- get_elev_point(df_cd, prj = crs_dd, src = "aws", z = aws_res, override_size_check = TRUE)
} else {
df_ev_aws <- get_elev_point(df_cd, prj = crs_dd, src = "aws", z = aws_res)
}
# EPQS elevation
df_ev_epqs <- get_elev_point(df_cd, prj = crs_dd, src = "epqs")
# Compile into one dataframe
df_ev <- data.frame(Elevation.EPQS = df_ev_epqs$elevation,
Elevation.AWS = df_ev_aws$elevation,
Difference = abs(df_ev_epqs$elevation - df_ev_aws$elevation)
)
# Check the mean difference of elevation between EPQS and AWS methods
mean_ev_diff <- mean(df_ev$Difference, na.rm = TRUE)
# Remove excess dataframes
rm(df_cd, df_ev_aws, df_ev_epqs, crs_dd)
return(cbind(data, data.frame(elevation_data = df_ev, mean_difference = mean_ev_diff)))
}
}
elevation_test <- get_elevation(df_1933_fl, 3)
View(elevation_test)
View(merged_df)
rm(merged_df)
View(ncin)
rm(ncin)
clean_data <- function(data){
df_1933_fl$Longitude<-as.numeric(df_1933_fl$Longitude)                        #Reform coordinates to be numeric
df_1933_fl$Latitude<-as.numeric(df_1933_fl$Latitude)
df_1933_bfcl<-data.frame(decimalLongitude=df_1933_fl$Longitude,               #df_1933_bfcl: bfcl stands for before cleaning
decimalLatitude = df_1933_fl$Latitude,               #df_1933_bfcl is temporary
species = "Oxyria digyna")
flags<-clean_coordinates(df_1933_bfcl)
#From this, the only issue seems to be records at sea, with a large majority of flagged specimens
#Let's first add the sea column to the dataframe, as well as elevation
df_1933_flagged <- cbind(df_1933_fl,
df_1933_ev,
flags = flags$.sea)
#Categorize alpine and arctic (arctic < 500)
df_1933_flagged$Environment <- ifelse(df_1933_ev$Elevation.AWS < 500, "Arctic", "Alpine")
#Remove flagged + alpine specimens
df_1933_clean <- df_1933_flagged %>%
filter(flags %in% c("TRUE"), Environment == "Arctic") %>%
subset(select = -c(flags, Environment))
#Remove excess dataframes                                                     #We keep df_1933_flagged, since a lot of data is omitted between this one and df_1933_clean
rm(df_1933_bfcl, flags)
return(df_1933_clean)
}
clean_data <- function(data){
data$Longitude<-as.numeric(data$Longitude)                        #Reform coordinates to be numeric
data$Latitude<-as.numeric(data$Latitude)
bfcl<-data.frame(decimalLongitude=data$Longitude,               #df_1933_bfcl: bfcl stands for before cleaning
decimalLatitude = data$Latitude,               #df_1933_bfcl is temporary
species = "Oxyria digyna")
flags <- clean_coordinates(bfcl)
#From this, the only issue seems to be records at sea, with a large majority of flagged specimens
#Let's first add the sea column to the dataframe, as well as elevation
df_flagged <- cbind(data, flags = flags$.sea)
#Categorize alpine and arctic (arctic < 500)
df_flagged$Environment <- ifelse(data$Elevation.AWS < 500, "Arctic", "Alpine")
#Remove flagged + alpine specimens
cl <- df_flagged %>%
filter(flags %in% c("TRUE"), Environment == "Arctic") %>%
subset(select = -c(flags, Environment))
#Remove excess dataframes                                                     #We keep df_1933_flagged, since a lot of data is omitted between this one and df_1933_clean
return(cbind(data, cl))
rm(df_1933_bfcl, flags, cl)
}
clean_test <- clean_data(elevation_test)
clean_data <- function(data){
data$Longitude<-as.numeric(data$Longitude)                        #Reform coordinates to be numeric
data$Latitude<-as.numeric(data$Latitude)
bfcl<-data.frame(decimalLongitude=data$Longitude,               #df_1933_bfcl: bfcl stands for before cleaning
decimalLatitude = data$Latitude,               #df_1933_bfcl is temporary
species = "Oxyria digyna")
flags <- clean_coordinates(bfcl)
#From this, the only issue seems to be records at sea, with a large majority of flagged specimens
#Let's first add the sea column to the dataframe, as well as elevation
df_flagged <- cbind(data, flags = flags$.sea)
#Categorize alpine and arctic (arctic < 500)
df_flagged$Environment <- ifelse(data$Elevation.AWS < 500, "Arctic", "Alpine")
#Remove flagged + alpine specimens
cl <- df_flagged %>%
filter(flags %in% c("TRUE"), Environment == "Arctic") %>%
subset(select = -c(flags, Environment))
#Remove excess dataframes                                                     #We keep df_1933_flagged, since a lot of data is omitted between this one and df_1933_clean
return(cbind(cl))
rm(df_1933_bfcl, flags, cl)
}
clean_data <- function(data){
data$Longitude<-as.numeric(data$Longitude)                        #Reform coordinates to be numeric
data$Latitude<-as.numeric(data$Latitude)
bfcl<-data.frame(decimalLongitude=data$Longitude,               #df_1933_bfcl: bfcl stands for before cleaning
decimalLatitude = data$Latitude,               #df_1933_bfcl is temporary
species = "Oxyria digyna")
flags <- clean_coordinates(bfcl)
#From this, the only issue seems to be records at sea, with a large majority of flagged specimens
#Let's first add the sea column to the dataframe, as well as elevation
df_flagged <- cbind(data, flags = flags$.sea)
#Categorize alpine and arctic (arctic < 500)
df_flagged$Environment <- ifelse(data$Elevation.AWS < 500, "Arctic", "Alpine")
#Remove flagged + alpine specimens
cl <- df_flagged %>%
filter(flags %in% c("TRUE"), Environment == "Arctic") %>%
subset(select = -c(flags, Environment))
#Remove excess dataframes                                                     #We keep df_1933_flagged, since a lot of data is omitted between this one and df_1933_clean
return(cbind(cl))
rm(df_1933_bfcl, flags)
}
clean_test <- clean_data(elevation_test)
clean_data <- function(data){
data$Longitude<-as.numeric(data$Longitude)                        #Reform coordinates to be numeric
data$Latitude<-as.numeric(data$Latitude)
bfcl<-data.frame(decimalLongitude=data$Longitude,               #df_1933_bfcl: bfcl stands for before cleaning
decimalLatitude = data$Latitude,               #df_1933_bfcl is temporary
species = "Oxyria digyna")
flags <- clean_coordinates(bfcl)
#From this, the only issue seems to be records at sea, with a large majority of flagged specimens
#Let's first add the sea column to the dataframe, as well as elevation
df_flagged <- cbind(data, flags = flags$.sea)
#Categorize alpine and arctic (arctic < 500)
df_flagged$Environment <- ifelse(data$Elevation.AWS < 500, "Arctic", "Alpine")
#Remove flagged + alpine specimens
cl <- df_flagged %>%
filter(flags %in% c("TRUE"), Environment == "Arctic") %>%
subset(select = -c(flags, Environment))
#Remove excess dataframes                                                     #We keep df_1933_flagged, since a lot of data is omitted between this one and df_1933_clean
return(cl)
rm(df_1933_bfcl, flags)
}
clean_test <- clean_data(elevation_test)
df_ev_aws <- get_elev_point(df_cd, prj = crs_dd, src = "aws", z = aws_res, override_size_check = TRUE)
data <- df_1933_fl
# Create dataframe with only coordinates
df_cd <- data.frame(x = data$Longitude, y = data$Latitude)
df_ev_aws <- get_elev_point(df_cd, prj = crs_dd, src = "aws", z = aws_res, override_size_check = TRUE)
df_ev_aws <- get_elev_point(df_cd, prj = crs_dd, src = "aws", z = aws_res, override_size_check = TRUE)
#### Functions ####
aws_res <- 2
df_ev_aws <- get_elev_point(df_cd, prj = crs_dd, src = "aws", z = aws_res, override_size_check = TRUE)
View(df_ev_aws)
# Compile into one dataframe
df_ev <- data.frame(Elevation.EPQS = df_ev_epqs$elevation,
Elevation.AWS = df_ev_aws$elevation,
Difference = abs(df_ev_epqs$elevation - df_ev_aws$elevation))
# EPQS elevation
df_ev_epqs <- get_elev_point(df_cd, prj = crs_dd, src = "epqs")
# Compile into one dataframe
df_ev <- data.frame(Elevation.EPQS = df_ev_epqs$elevation,
Elevation.AWS = df_ev_aws$elevation,
Difference = abs(df_ev_epqs$elevation - df_ev_aws$elevation))
# Check the mean difference of elevation between EPQS and AWS methods
mean_ev_diff <- mean(df_ev$Difference, na.rm = TRUE)
return(cbind(data, data.frame(elevation_data = df_ev, mean_difference = mean_ev_diff)))
cbind(data, data.frame(elevation_data = df_ev, mean_difference = mean_ev_diff)))
cbind(data, data.frame(elevation_data = df_ev, mean_difference = mean_ev_diff))
cbind(data, data.frame(df_ev, mean_ev_diff))
#Function to get elevation from coordinates
get_elevation <- function(data, aws_res, osc = FALSE) {
if(aws_res > 9 & osc == FALSE){
message("WARNING: aws_res above 8 downloads very large files. Check 'osc = TRUE' to override")
}else{
# Create dataframe with only coordinates
df_cd <- data.frame(x = data$Longitude, y = data$Latitude)
# Get elevation from coordinates using elevatr
crs_dd <- 4326
#AWS elevation
if (osc) {
df_ev_aws <- get_elev_point(df_cd, prj = crs_dd, src = "aws", z = aws_res, override_size_check = TRUE)
} else {
df_ev_aws <- get_elev_point(df_cd, prj = crs_dd, src = "aws", z = aws_res)
}
# EPQS elevation
df_ev_epqs <- get_elev_point(df_cd, prj = crs_dd, src = "epqs")
# Compile into one dataframe
df_ev <- data.frame(Elevation.EPQS = df_ev_epqs$elevation,
Elevation.AWS = df_ev_aws$elevation,
Difference = abs(df_ev_epqs$elevation - df_ev_aws$elevation))
# Check the mean difference of elevation between EPQS and AWS methods
mean_ev_diff <- mean(df_ev$Difference, na.rm = TRUE)
# Remove excess dataframes
return(cbind(data, data.frame(df_ev, mean_ev_diff)))
rm(df_cd, df_ev_aws, df_ev_epqs, crs_dd, df_ev)
}
}
elevation_test <- get_elevation(df_1933_fl, 3)
#Function that finds closest temperature grid
find_closest_grid <- function(lat, lon, year, month, lon_max, lat_max) {
lon_radius <- 0
lat_radius <- 0
min_distance <- Inf
selected_grid <- NULL
radius_used <- NA_real_  # Initialize radius_used
while (lon_radius <= lon_max) {
grid <- df_temp_month %>%
filter(
Latitude >= lat - lat_radius,
Latitude < lat + lat_radius,
Longitude >= lon - lon_radius,
Longitude < lon + lon_radius,
Year == year,
Month == month
)
if (nrow(grid) > 0) {
# Calculate distance for each grid and select the closest one
distances <- sqrt((grid$Latitude - lat)^2 + (grid$Longitude - lon)^2)
min_index <- which.min(distances)
if (distances[min_index] < min_distance) {
min_distance <- distances[min_index]
selected_grid <- grid[min_index, ]
lon_radius_used <- lon_radius  # Update radius_used
lat_radius_used <- lat_radius
}
}
lon_radius <- lon_radius + 0.5  # Increment the radius
if(lat_radius < lat_max){
lat_radius <- lat_radius + 0.5
}
}
if (is.null(selected_grid)) {
return(list(Temperature_Anomaly = NA_real_, Lon_Radius_Used = NA_real_, Lat_Radius_Used = NA_real_))
} else {
return(list(Temperature_Anomaly = selected_grid$Temperature.Anomaly...C., Lon_Radius_Used = lon_radius_used, Lat_Radius_Used = lat_radius_used))  # Return radius_used
}
}
#Function to get elevation from coordinates
get_elevation <- function(data, aws_res, osc = FALSE) {
if(aws_res > 9 & osc == FALSE){
message("WARNING: aws_res above 8 downloads very large files. Check 'osc = TRUE' to override")
}else{
# Create dataframe with only coordinates
df_cd <- data.frame(x = data$Longitude, y = data$Latitude)
# Get elevation from coordinates using elevatr
crs_dd <- 4326
#AWS elevation
if (osc) {
df_ev_aws <- get_elev_point(df_cd, prj = crs_dd, src = "aws", z = aws_res, override_size_check = TRUE)
} else {
df_ev_aws <- get_elev_point(df_cd, prj = crs_dd, src = "aws", z = aws_res)
}
# EPQS elevation
df_ev_epqs <- get_elev_point(df_cd, prj = crs_dd, src = "epqs")
# Compile into one dataframe
df_ev <- data.frame(Elevation.EPQS = df_ev_epqs$elevation,
Elevation.AWS = df_ev_aws$elevation,
Difference = abs(df_ev_epqs$elevation - df_ev_aws$elevation))
# Check the mean difference of elevation between EPQS and AWS methods
mean_ev_diff <- mean(df_ev$Difference, na.rm = TRUE)
# Remove excess dataframes
return(cbind(data, data.frame(df_ev, mean_ev_diff)))
rm(df_cd, df_ev_aws, df_ev_epqs, crs_dd, df_ev)
}
}
#READ BELOW:
{
#EPQS uses an API, which does not have global coverage. High precision though
#AWS downloads a global raster
#AWS therefore has global coverage, but higher resolutions take a lot of time
#Change the value of "aws_res" to set the resolution of
#Resolutions range from 1-15, with 15 being the most precise
#For info on resolutions, see https://github.com/tilezen/joerd/blob/master/docs/data-sources.md#what-is-the-ground-resolution
#Any resolution above 8 will not let you proceed, due to large file sizes!
#Set 'osc = TRUE' when using the function to override
}
#Function to clean and remove flagged specimens
#Note that there are columns referenced that are created through 'get_elevation'
clean_data <- function(data){
data$Longitude<-as.numeric(data$Longitude)                        #Reform coordinates to be numeric
data$Latitude<-as.numeric(data$Latitude)
bfcl<-data.frame(decimalLongitude=data$Longitude,               #df_1933_bfcl: bfcl stands for before cleaning
decimalLatitude = data$Latitude,               #df_1933_bfcl is temporary
species = "Oxyria digyna")
flags <- clean_coordinates(bfcl)
#From this, the only issue seems to be records at sea, with a large majority of flagged specimens
#Let's first add the sea column to the dataframe, as well as elevation
df_flagged <- cbind(data, flags = flags$.sea)
#Categorize alpine and arctic (arctic < 500)
df_flagged$Environment <- ifelse(data$Elevation.AWS < 500, "Arctic", "Alpine")
#Remove flagged + alpine specimens
cl <- df_flagged %>%
filter(flags %in% c("TRUE"), Environment == "Arctic") %>%
subset(select = -c(flags, Environment))
#Remove excess dataframes                                                     #We keep df_1933_flagged, since a lot of data is omitted between this one and df_1933_clean
return(cl)
rm(df_1933_bfcl, flags, cl)
}
df_temp_month <- read.csv2("Temperature_monthly.csv")
View(df_temp_month)
View(df_1933_first)
#Function that finds closest temperature grid
find_closest_temperature <- function(lat, lon, year, month, lon_max, lat_max) {
lon_radius <- 0
lat_radius <- 0
min_distance <- Inf
selected_grid <- NULL
radius_used <- NA_real_  # Initialize radius_used
while (lon_radius <= lon_max) {
grid <- df_temp_month %>%
filter(
Latitude >= lat - lat_radius,
Latitude < lat + lat_radius,
Longitude >= lon - lon_radius,
Longitude < lon + lon_radius,
Year == year,
Month == month
)
if (nrow(grid) > 0) {
# Calculate distance for each grid and select the closest one
distances <- sqrt((grid$Latitude - lat)^2 + (grid$Longitude - lon)^2)
min_index <- which.min(distances)
if (distances[min_index] < min_distance) {
min_distance <- distances[min_index]
selected_grid <- grid[min_index, ]
lon_radius_used <- lon_radius  # Update radius_used
lat_radius_used <- lat_radius
}
}
lon_radius <- lon_radius + 0.5  # Increment the radius
if(lat_radius < lat_max){
lat_radius <- lat_radius + 0.5
}
}
if (is.null(selected_grid)) {
return(list(Temperature_Anomaly = NA_real_, Lon_Radius_Used = NA_real_, Lat_Radius_Used = NA_real_))
} else {
return(list(Temperature_Anomaly = selected_grid$Temperature.Anomaly...C., Lon_Radius_Used = lon_radius_used, Lat_Radius_Used = lat_radius_used))  # Return radius_used
}
}
View(df_1933_first)
savehistory("C:/Users/zodas/OneDrive/Skrivbord/R-stuff/Bachelor's project/Random graphs/Backup.Rhistory")
